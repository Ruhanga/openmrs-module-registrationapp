package org.openmrs.module.registrationapp.fragment.controller;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import org.junit.Before;
import org.junit.Test;

import org.openmrs.GlobalProperty;
import org.openmrs.Patient;
import org.openmrs.api.AdministrationService;
import org.openmrs.api.context.Context;
import org.openmrs.api.PatientService;
import org.openmrs.module.appframework.domain.AppDescriptor;
import org.openmrs.module.appframework.domain.Extension;
import org.openmrs.module.appframework.context.AppContextModel;
import org.openmrs.module.appframework.service.AppFrameworkService;
import org.openmrs.module.appui.UiSessionContext;
import org.openmrs.module.emrapi.patient.PatientDomainWrapper;
import org.openmrs.module.registrationapp.fragment.controller.summary.RegistrationSummaryFragmentController;
import org.openmrs.module.registrationapp.RegistrationAppConstants;
import org.openmrs.util.OpenmrsConstants;
import org.openmrs.web.test.BaseModuleWebContextSensitiveTest;
import org.openmrs.ui.framework.fragment.FragmentModel;
import org.openmrs.ui.framework.fragment.FragmentConfiguration;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class RegistrationSummaryFragmentControllerTest {

    private RegistrationSummaryFragmentController regSummaryFragmentcontroller;

    private AppDescriptor appDescriptor;
    
    private FragmentConfiguration fragmentconfig;

    private Patient patient;
    
    private AdministrationService administrationService;
    
    private UiSessionContext sessionContext;
    
    private PatientDomainWrapper patientDomainWrapper;
    
    private AppFrameworkService appFrameworkService;
    
    private List<Extension> extnList;
    
    @Before
    public void setUp() throws Exception {
    	patientDomainWrapper = new PatientDomainWrapper(); 
    	patient = new Patient();
    	extnList = new ArrayList<Extension>();
    	
    	fragmentconfig = new FragmentConfiguration();
    	fragmentconfig.put("patient", patient);
    	fragmentconfig.put("appId", "referenceapplication.registrationapp.registerPatient");

        regSummaryFragmentcontroller = new RegistrationSummaryFragmentController();
        
        InputStream inputStream = getClass().getClassLoader().getResourceAsStream("registration_app.json");    	
    	List<AppDescriptor> appDescriptors = new ObjectMapper().readValue(inputStream, new TypeReference<List<AppDescriptor>>() {});
    	appDescriptor = appDescriptors.get(0);
    	
        appFrameworkService = mock(AppFrameworkService.class);
        when(appFrameworkService.getExtensionsForCurrentUser(anyString(), any(AppContextModel.class))).thenReturn(extnList);
        when(appFrameworkService.getApp(anyString())).thenReturn(appDescriptor);
        
        administrationService = mock(AdministrationService.class);

        sessionContext = mock(UiSessionContext.class);
        when(sessionContext.generateAppContextModel()).thenReturn(new AppContextModel());
    }

    @Test
    public void controller_shouldAddAutoGeneratedDistributedSummaryWidgets() throws Exception {
    	// setup
    	FragmentModel fragmentModel = new FragmentModel();
    	when(administrationService.getGlobalProperty(anyString(), anyString())).thenReturn("true");
    	
    	// replay
    	regSummaryFragmentcontroller.controller(fragmentconfig, fragmentModel, appFrameworkService, administrationService
    											,patientDomainWrapper
    					                        ,null, sessionContext);
    	List<Extension> firstColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("firstColumnFragments");
   	 	List<Extension> secondColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("secondColumnFragments");
   	 	
    	// verify
   	 	assertThat(firstColumnFragments.size(), is(2));
	 	assertThat(secondColumnFragments.size(), is(1));
    }
    
    @Test
    public void controller_shouldAddAutoGeneratedSummaryWidgetsFirstColumn() throws Exception {
    	// setup
    	FragmentModel fragmentModel = new FragmentModel();
    	when(administrationService.getGlobalProperty(anyString(), anyString())).thenReturn("false");
    	
    	// replay
    	regSummaryFragmentcontroller.controller(fragmentconfig, fragmentModel, appFrameworkService, administrationService 
    											,patientDomainWrapper
    					                        ,null, sessionContext);
    	List<Extension> firstColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("firstColumnFragments");
   	 	List<Extension> secondColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("secondColumnFragments");
   	 	
    	// verify
   	 	assertThat(firstColumnFragments.size(), is(3));
	 	assertThat(secondColumnFragments.size(), is(0));
    }
    
    @Test
    public void controller_shouldAddServiceProvidedSummaryWidgets() throws Exception {
    	// setup
    	FragmentModel fragmentModel = new FragmentModel();
    	extnList.add(new Extension());
    	when(administrationService.getGlobalProperty(anyString(), anyString())).thenReturn("false");
    	
    	//replay
    	regSummaryFragmentcontroller.controller(fragmentconfig, fragmentModel, appFrameworkService, administrationService 
    											,patientDomainWrapper
    											,null, sessionContext);
    	List<Extension> firstColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("firstColumnFragments");
   	 	List<Extension> secondColumnFragments = (ArrayList<Extension>) fragmentModel.getAttribute("secondColumnFragments");

   	 	//verify
   	 	assertThat(firstColumnFragments.size(), is(1));
	 	assertThat(secondColumnFragments.size(), is(1)); 
    }
}